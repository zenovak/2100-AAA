datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  username      String?            @unique @default(cuid())
  
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  
  password      String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime?          @updatedAt

  role          Role?              @default(user)
}

enum Role {
  admin
  user
}

// next-auth OAuth requirement
model Account {
  id                String      @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}


model Agent {
  id              String      @id @default(cuid())
  name            String      @unique
  description     String?

  // core fields used by backend
  variables       String                               // JSON String of the variables used by workflow
  workflow        String                               // JSON string

  // Additional fields used by frontend

  task            Task[]
}

model Task {
  id             String       @id @default(cuid())
  agentId        String

  logs           String                               // JSON string
  output         String                               // JSON string

  agent          Agent        @relation(fields: [agentId], references: [id], onDelete: Cascade)
}
